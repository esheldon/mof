#!/usr/bin/env python
from __future__ import print_function
import os
import time
import yaml
import esutil as eu
import numpy as np
import mof
import ngmix
import fitsio


from argparse import ArgumentParser
parser = ArgumentParser()

parser.add_argument('config_file', help='config file name')
parser.add_argument('seed', type=int, help='seed for sim')
parser.add_argument('ntrial', type=int, help='number to simulate')
parser.add_argument('--stamps',
                    action='store_true',
                    help='use postage stamps')

parser.add_argument('--galsim',
                    action='store_true',
                    help='use postage stamps')

parser.add_argument('--kspace',
                    action='store_true',
                    help='use k space')

parser.add_argument('--save',
                    action='store_true',
                    help='save plots and outputs')

parser.add_argument('--show',
                    action='store_true',
                    help='show plots')
parser.add_argument('--show-corrected',
                    action='store_true',
                    help='show plots with neighbors subtracted')

parser.add_argument('--size',
                    type=int,
                    default=1000,
                    help='size of plot')
parser.add_argument('--corrected-size',
                    type=int,
                    default=1000,
                    help='size of corrected plot')

parser.add_argument('--trueguess',
                    action='store_true',
                    help='use true guess')
parser.add_argument('--pdfguess',
                    action='store_true',
                    help='use true guess')
parser.add_argument('--trueprior',
                    action='store_true',
                    help='use true priors')


def print_pars(nobj, npars_per, pars, front="    "):
    for i in range(nobj):
        beg = i*npars_per
        end = (i+1)*npars_per
        tpars = pars[beg:end]
        ngmix.print_pars(tpars, front=front)


def main():
    args = parser.parse_args()

    print("seed:", args.seed)
    with open(args.config_file) as fobj:
        try:
            config = yaml.safe_load(fobj)
        except AttributeError:
            config = yaml.load(fobj)

    nband = config['nband']
    assert nband == 1, '1 band for now'

    filebase = os.path.basename(args.config_file).replace('.yaml', '')
    filebase = '%s-%d' % (filebase, args.seed)
    if args.stamps:
        filebase += '-stamps'

    weight_type = 'uberseg'

    fitsfile = filebase+'.fits'
    print("will write to:", fitsfile)

    dt = [
        ('psf_T', 'f8'),
        ('guess', 'f8', 6+nband),
        ('pars', 'f8', 6+nband),
        ('pars_err', 'f8', 6+nband),
        ('flux_s2n', 'f8', nband),
        ('s2n', 'f8'),
    ]

    detband = 0

    sim = mof.moftest.Sim(config, args.seed)
    fitrng = np.random.RandomState(sim.rng.randint(0, 2**15))
    np.random.seed(fitrng.randint(0, 2**15))

    tm_sim = 0.0
    tm_fit = 0.0
    tm_extract = 0.0
    nfail = 0
    ntry = 2

    output = []
    lm_pars = {
        'maxfev': 4000,
        'ftol': 1.0e-3,
        'xtol': 1.0e-3,
    }

    for itrial in range(args.ntrial):
        print("-"*70)
        print("%d/%d" % (itrial+1, args.ntrial))

        this_tm_sim = time.time()
        sim.make_obs()
        this_tm_sim = time.time()-this_tm_sim

        # this runs sextractor
        this_tm_extract = time.time()
        medser = sim.get_medsifier()
        this_tm_extract = time.time() - this_tm_extract

        m2 = medser.get_meds(detband)
        objects = m2.get_cat()

        print("found", len(objects), 'objects')
        nobj = len(objects)

        if nobj == 0:
            print("failed to find any objects")
            nfail += 1
            continue

        this_tm_fit = time.time()

        if args.stamps:

            m = medser.get_multiband_meds()
            list_of_obs = []
            for iobj in range(objects.size):
                mbo = m.get_mbobs(iobj, weight_type=weight_type)

                for olist in mbo:
                    for o in olist:
                        o.set_psf(sim.psf_obs)

                list_of_obs.append(mbo)

            if args.galsim:
                prior = mof.galsimfit.get_mof_stamps_prior_gs(
                    list_of_obs,
                    config['fit_model'],
                    fitrng,
                )

                if args.kspace:
                    fitter = mof.galsimfit.KGSMOF(
                        list_of_obs,
                        config['fit_model'],
                        prior=prior,
                        lm_pars=lm_pars,
                    )
                else:
                    fitter = mof.galsimfit.GSMOF(
                        list_of_obs,
                        config['fit_model'],
                        prior=prior,
                        lm_pars=lm_pars,
                    )

            else:
                prior = mof.moflib.get_mof_stamps_prior(
                    list_of_obs,
                    config['fit_model'],
                    fitrng,
                )
                fitter = mof.MOFStamps(
                    list_of_obs,
                    config['fit_model'],
                    prior=prior,
                    lm_pars=lm_pars,
                )

        else:
            prior = mof.moflib.get_mof_full_image_prior(
                objects,
                nband,
                sim.obs[0][0].jacobian,
                config['fit_model'],
                fitrng,
            )

            fitter = mof.MOF(
                sim.obs,
                config['fit_model'],
                nobj,
                prior=prior,
                lm_pars=lm_pars,
            )

        for itry in range(ntry):
            if args.stamps:
                if args.galsim:
                    guess = mof.galsimfit.get_stamp_guesses_gs(
                        list_of_obs, detband, config['fit_model'], fitrng,
                    )
                else:
                    guess = mof.moflib.get_stamp_guesses(
                        list_of_obs, detband, config['fit_model'], fitrng,
                    )
            else:
                guess = mof.moflib.get_full_image_guesses(
                    objects, nband, sim.obs[0][0].jacobian,
                    config['fit_model'], fitrng,
                )

            fitter.go(guess)
            res = fitter.get_result()
            if res['flags'] == 0:
                break

        this_tm_fit = time.time()-this_tm_fit

        tm_fit += this_tm_fit
        tm_sim += this_tm_sim
        tm_extract += this_tm_extract

        print("this time fit:", this_tm_fit)

        if args.show:
            showim = sim.imlist[0]

        if res['flags'] != 0:
            print("failed")
            nfail += 1

            if args.show:
                import images
                images.view(showim/showim.max())
                if (itrial < (args.ntrial-1) and
                        input('hit a key (q to quit): ') == 'q'):
                    return
        else:

            npars_per = guess.size//nobj

            data = np.zeros(nobj, dtype=dt)
            # assuming same psf T for all
            data['psf_T'] = sim.psf_obs.gmix.get_T()
            data['guess'] = guess.reshape(nobj, npars_per)
            data['pars'] = res['pars'].reshape(nobj, npars_per)
            perr = np.sqrt(np.diag(res['pars_cov']))
            data['pars_err'] = perr.reshape(nobj, npars_per)

            output.append(data)

            if args.show or args.save:
                import images
                print("nfev:", res['nfev'])
                print_pars(nobj, npars_per, guess, front="guess: ")
                print_pars(nobj, npars_per, res['pars'], front="best_fit: ")
                print_pars(
                    nobj,
                    npars_per,
                    res['pars_err'],
                    front="     err: ",
                )

                if args.stamps:
                    for iobj, mbobs in enumerate(list_of_obs):
                        for band, obslist in enumerate(mbobs):
                            for obsnum, obs in enumerate(obslist):
                                model_image = fitter.make_image(
                                    iobj,
                                    band=band,
                                    obsnum=obsnum,
                                    include_nbrs=True,
                                )
                                images.compare_images(
                                    obs.image,
                                    model_image,
                                    label1='image',
                                    label2='model',
                                    title='%d %d %d' % (iobj, band, obsnum)
                                )

                else:
                    model_image = fitter.make_image(band=0, obsnum=0)
                    # images.view(showim/showim.max())
                    images.compare_images(
                        showim,
                        model_image,
                        label1='image',
                        label2='model',
                        width=args.size,
                        height=args.size,
                        cross_sections=False,
                    )

                if (itrial < (args.ntrial-1)
                        and input('hit a key (q to quit): ') == 'q'):
                    return

    output = eu.numpy_util.combine_arrlist(output)
    fitsio.write(fitsfile, output, clobber=True)

    nuse = args.ntrial-nfail
    print("nfail: %d / %d %g" % (nfail, args.ntrial, float(nfail)/args.ntrial))
    print("time sim per trial:", tm_sim/nuse)
    print("time fit per trial:", tm_fit/nuse)
    print("time extract per trial:", tm_extract/nuse)
    print("output is in:", fitsfile)


if __name__ == "__main__":
    main()
